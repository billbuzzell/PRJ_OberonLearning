MODULE RA8875;
(* https://github.com/adafruit/Adafruit_RA8875/blob/master/Adafruit_RA8875.h*)
IMPORT SPI;

CONST

(* Colors (RGB565) *) 
	RA8875_BLACK = 0000H; 
	RA8875_BLUE = 001FH; 
	RA8875_RED = 0F80H; 
	RA8875_GREEN = 07E0H;(* 0x07E0*) 
  RA8875_CYAN = 07FFH;(* 0x07FF *)
  RA8875_MAGENTA = 0F81FH;(* 0xF81F *) 
  RA8875_YELLOW = 0FFE0H;(* 0xFFE0 *)   
  RA8875_WHITE = 0FFFFH;(* 0xFFFF *) 
 
(* Command/Data pins for SPI *) 
  RA8875_DATAWRITE = 000H; 
  RA8875_DATAREAD = 040H; 
  RA8875_CMDWRITE = 080H; 
  RA8875_CMDREAD = 0C0H; 
 
(* Registers & bits *)
  RA8875_PWRR = 001H; 
  RA8875_PWRR_DISPON = 080H;
  RA8875_PWRR_DISPOFF = 000H; 
  RA8875_PWRR_SLEEP = 002H; 
  RA8875_PWRR_NORMAL = 000H; 
  RA8875_PWRR_SOFTRESET = 001H; 
 
  RA8875_MRWC = 0002H; 
 
  RA8875_GPIOX = 0C7H; 
 
  RA8875_PLLC1 = 088H; 
  RA8875_PLLC1_PLLDIV2 = 080H;
   
  RA8875_PLLC1_PLLDIV1 = 000H; 

  RA8875_PLLC2 = 089H; 
  RA8875_PLLC2_DIV1 = 000H; 
  RA8875_PLLC2_DIV2 = 0001; 
  RA8875_PLLC2_DIV4 = 002H; 
  RA8875_PLLC2_DIV8 = 003H; 
  RA8875_PLLC2_DIV16 = 004H; 
  RA8875_PLLC2_DIV32 = 005H; 
  RA8875_PLLC2_DIV64 = 006H; 
  RA8875_PLLC2_DIV128 = 007H; 
 
  RA8875_SYSR = 010H; 
  RA8875_SYSR_8BPP = 000H; 
  RA8875_SYSR_16BPP = 0C0H; 
  RA8875_SYSR_MCU8 = 000H; 
  RA8875_SYSR_MCU16 = 003H; 
 
  RA8875_PCSR = 004H; 
  RA8875_PCSR_PDATR = 000H; 
  RA8875_PCSR_PDATL = 080H; 
  RA8875_PCSR_CLK = 000H; 
  RA8875_PCSR_2CLK = 001H;
  RA8875_PCSR_4CLK = 002H; 
  RA8875_PCSR_8CLK = 003H; 
 
  RA8875_HDWR = 014H;
 
  RA8875_HNDFTR = 015H; 
  RA8875_HNDFTR_DE_HIGH = 000H; 
  RA8875_HNDFTR_DE_LOW = 080H; 
 
  RA8875_HNDR = 016H; 
  RA8875_HSTR = 017H; 
  RA8875_HPWR = 018H; 
  RA8875_HPWR_LOW = 000H; 
  RA8875_HPWR_HIGH = 080H; 
 
  RA8875_VDHR0 = 019H; 
  RA8875_VDHR1 = 01AH; 
  RA8875_VNDR0 = 01BH; 
  RA8875_VNDR1 = 01CH; 
  RA8875_VSTR0 = 01DH; 
  RA8875_VSTR1 = 01EH; 
  RA8875_VPWR = 01FH; 
  RA8875_VPWR_LOW = 000H; 
  RA8875_VPWR_HIGH = 080H; 
 
  RA8875_HSAW0 = 030H; 
  RA8875_HSAW1 = 031H; 
  RA8875_VSAW0 = 032H; 
  RA8875_VSAW1 = 033H; 
 
  RA8875_HEAW0 = 034H; 
  RA8875_HEAW1 = 035H; 
  RA8875_VEAW0 = 036H; 
  RA8875_VEAW1 = 037H; 
 
  RA8875_MCLR = 08EH; 
  RA8875_MCLR_START = 080H; 
  RA8875_MCLR_STOP = 000H; 
  RA8875_MCLR_READSTATUS = 080H; 
  RA8875_MCLR_FULL = 000H; 
  RA8875_MCLR_ACTIVE = 040H; 
 
  RA8875_DCR = 090H; 
  RA8875_DCR_LINESQUTRI_START = 080H; 
  RA8875_DCR_LINESQUTRI_STOP = 000H; 
  RA8875_DCR_LINESQUTRI_STATUS = 080H; 
  RA8875_DCR_CIRCLE_START = 040H; 
  RA8875_DCR_CIRCLE_STATUS = 040H; 
  RA8875_DCR_CIRCLE_STOP = 000H; 
  RA8875_DCR_FILL = 020H;
  RA8875_DCR_NOFILL = 000H; 
  RA8875_DCR_DRAWLINE = 000H; 
  RA8875_DCR_DRAWTRIANGLE = 001H; 
  RA8875_DCR_DRAWSQUARE = 010H; 
 
  RA8875_ELLIPSE = 0A0H; 
  RA8875_ELLIPSE_STATUS = 080H; 
 
  RA8875_MWCR0 = 040H; 
  RA8875_MWCR0_GFXMODE = 000H; 
  RA8875_MWCR0_TXTMODE = 080H; 
 
  RA8875_CURH0 = 046H; 
  RA8875_CURH1 = 047H; 
  RA8875_CURV0 = 048H; 
  RA8875_CURV1 = 049H; 
 
  RA8875_P1CR = 08AH; 
  RA8875_P1CR_ENABLE = 080H; 
  RA8875_P1CR_DISABLE = 000H; 
  RA8875_P1CR_CLKOUT = 010H;
  RA8875_P1CR_PWMOUT = 000H; 
 
  RA8875_P1DCR = 08BH; 
 
  RA8875_P2CR = 08CH; 
  RA8875_P2CR_ENABLE = 080H; 
  RA8875_P2CR_DISABLE = 000H; 
  RA8875_P2CR_CLKOUT = 010H;
  RA8875_P2CR_PWMOUT = 000H; 
 
  RA8875_P2DCR = 08DH; 
 
  RA8875_PWM_CLK_DIV1 = 000H;
  RA8875_PWM_CLK_DIV2 = 001H; 
  RA8875_PWM_CLK_DIV4 = 002H; 
  RA8875_PWM_CLK_DIV8 = 003H; 
  RA8875_PWM_CLK_DIV16 = 004H; 
  RA8875_PWM_CLK_DIV32 = 005H;
  RA8875_PWM_CLK_DIV64 = 006H; 
  RA8875_PWM_CLK_DIV128 = 007H; 
  RA8875_PWM_CLK_DIV256 = 008H; 
  RA8875_PWM_CLK_DIV512 = 009H; 
  RA8875_PWM_CLK_DIV1024 = 00AH; 
  RA8875_PWM_CLK_DIV2048 = 00BH; 
  RA8875_PWM_CLK_DIV4096 = 00CH;
  RA8875_PWM_CLK_DIV8192 = 00DH; 
  RA8875_PWM_CLK_DIV16384 = 00EH; 
  RA8875_PWM_CLK_DIV32768 = 00FH; 
 
  RA8875_TPCR0 = 070H; 
  RA8875_TPCR0_ENABLE = 080H; 
  RA8875_TPCR0_DISABLE = 000H; 
  RA8875_TPCR0_WAIT_512CLK = 000H; 
  RA8875_TPCR0_WAIT_1024CLK = 010H; 
  RA8875_TPCR0_WAIT_2048CLK = 020H; 
  RA8875_TPCR0_WAIT_4096CLK = 030H;
  RA8875_TPCR0_WAIT_8192CLK = 040H; 
  RA8875_TPCR0_WAIT_16384CLK = 050H; 
  RA8875_TPCR0_WAIT_32768CLK = 060H; 
  RA8875_TPCR0_WAIT_65536CLK = 070H; 
  RA8875_TPCR0_WAKEENABLE = 008H; 
  RA8875_TPCR0_WAKEDISABLE = 000H; 
  RA8875_TPCR0_ADCCLK_DIV1 = 000H; 
  RA8875_TPCR0_ADCCLK_DIV2 = 001H; 
  RA8875_TPCR0_ADCCLK_DIV4 = 002H;
  RA8875_TPCR0_ADCCLK_DIV8 = 003H; 
  RA8875_TPCR0_ADCCLK_DIV16 = 004H; 
  RA8875_TPCR0_ADCCLK_DIV32 = 005H; 
  RA8875_TPCR0_ADCCLK_DIV64 = 006H; 
  RA8875_TPCR0_ADCCLK_DIV128 = 007H; 
 
  RA8875_TPCR1 = 071H; 
  RA8875_TPCR1_AUTO = 000H; 
  RA8875_TPCR1_MANUAL = 040H; 
  RA8875_TPCR1_VREFINT = 000H; 
  RA8875_TPCR1_VREFEXT = 020H; 
  RA8875_TPCR1_DEBOUNCE = 004H;
  RA8875_TPCR1_NODEBOUNCE = 000H; 
  RA8875_TPCR1_IDLE = 000H; 
  RA8875_TPCR1_WAIT = 001H; 
  RA8875_TPCR1_LATCHX = 002H; 
  RA8875_TPCR1_LATCHY = 003H; 
 
  RA8875_TPXH = 072H; 
  RA8875_TPYH = 073H; 
  RA8875_TPXYL = 074H;
 
  RA8875_INTC1 = 0F0H; 
  RA8875_INTC1_KEY = 010H; 
  RA8875_INTC1_DMA = 008H; 
  RA8875_INTC1_TP = 004H; 
  RA8875_INTC1_BTE = 002H; 
 
  RA8875_INTC2 = 0F1H; 
  RA8875_INTC2_KEY = 010H; 
  RA8875_INTC2_DMA = 008H; 
  RA8875_INTC2_TP = 004H; 
  RA8875_INTC2_BTE = 002H;

(*
/**************************************************************************/ 
44 /*! 
45       Initialises the LCD driver and any HW required by the display 
46        
47       @args s[in] The display size, which can be either: 
48                   'RA8875_480x272' (4.3" displays) r 
49                   'RA8875_800x480' (5" and 7" displays) 
50 */ 
51 /**************************************************************************/ 
52 boolean Adafruit_RA8875::begin(enum RA8875sizes s) { 
53   _size = s; 
54 
 
55   if (_size == RA8875_480x272) { 
56     _width = 480; 
57     _height = 272; 
58   }  
59   if (_size == RA8875_800x480) { 
60     _width = 800; 
61     _height = 480; 
62   } 
63 
 
64   pinMode(_cs, OUTPUT); 
65   digitalWrite(_cs, HIGH); 
66   pinMode(_rst, OUTPUT);  
67   digitalWrite(_rst, LOW); 
68 
 
69   digitalWrite(_rst, LOW); 
70   delay(100); 
71   digitalWrite(_rst, HIGH); 
72   delay(100); 
73    
74   SPI.begin(); 
75 #ifdef __AVR__ 
76   SPI.setClockDivider(SPI_CLOCK_DIV128); 
77   SPI.setDataMode(SPI_MODE0); 
78 #endif 
79    
80   if (readReg(0) != 0x75) { 
81     return false; 
82   } 
83 
 
84   initialize(); 
85 
 
86 #ifdef __AVR__ 
87   SPI.setClockDivider(SPI_CLOCK_DIV4); 
88 #endif 
89   return true; 
90 } 
*)

PROCEDURE RA8875_init();
END RA8875_init;



END RA8875.

